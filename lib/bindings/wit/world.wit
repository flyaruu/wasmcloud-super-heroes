package hti:superheroes;


interface types {
  
    record hero {
      id: s64,
      level: s32,
      name: string,
      other-name: option<string>,
      picture: string,
      powers: string,
    }
    record villain {
      id: s64,
      level: s32,
      name: string,
      other-name: option<string>,
      picture: string,
      powers: string,
    }
    record location {
      id: s64,
      name: string,
      description: string,
      picture: string,
      %type: location-type, // TODO use enum
    }

    variant location-type {
      city,
      planet,
      place,
      island,
      country,
      moon           
    }

    variant team {
      heroes,
      villains
    }



    record fight-result {
      id: string,
      fight-date: u64,
      winner-name: string,
      winner-level: s32,
      winner-powers: string,
      winner-picture: string,
      loser-name: string,
      loser-level: s32,
      loser-powers: string,
      loser-picture: string,
      winner-team: team,
      loser-team: team,
      location: location
    }
    
    record fighters {
      hero: hero,
      villain: villain
    }

    record fight-request {
      hero: hero,
      villain: villain,
      location: location
    }
}

world base {
  import wasmcloud:postgres/query@0.1.1-draft;
  import wasi:logging/logging@0.1.0-draft;
}


interface hero-repository {
  use types.{hero};
  get-hero: func(id: s64) -> option<hero>;
  get-random-hero: func() -> hero;
  get-all-heroes: func() -> list<hero>;  
}

interface villain-repository {
  use types.{villain};
  get-villain: func(id: s64) -> option<villain>;
  get-random-villain: func() -> villain;
  get-all-villains: func() -> list<villain>;  
}

interface location-repository {
  use types.{location};
  get-location: func(id: s64) -> option<location>;
  get-random-location: func() -> location;
  get-all-locations: func() -> list<location>;  
}

interface perform-fight {
  use types.{fight-result, fight-request, hero, villain, fighters};
  random-fighters: func() -> fighters;
  perform-fight: func(request: fight-request) -> fight-result;
}

interface hero-api {
  use types.{hero};
  get-hero: func(id: s64) -> option<hero>;
  get-random-hero: func() -> hero;
  get-all-heroes: func() -> list<hero>;  
}

world hero-repository-world {
  include base;
  export hero-repository;
}

world villain-repository-world {
  include base;
  export villain-repository;
}

world location-repository-world {
  include base;
  export location-repository;
}

world hero-api-world {
  export wasi:http/incoming-handler@0.2.4;
  import wasi:logging/logging@0.1.0-draft;
  import hero-repository;
}

world villain-api-world {
  export wasi:http/incoming-handler@0.2.4;
  import wasi:logging/logging@0.1.0-draft;
  import villain-repository;
}

world location-api-world {
  export wasi:http/incoming-handler@0.2.4;
  import wasi:logging/logging@0.1.0-draft;
  import location-repository;
}

world fight-api-world {
  use types.{hero,villain,location,fight-result,fight-request};
  export perform-fight;
  export wasi:http/incoming-handler@0.2.4;
  import wasi:logging/logging@0.1.0-draft;
  import wasi:http/outgoing-handler@0.2.4;
  import wasi:clocks/wall-clock@0.2.4;
}

world rest-fight {
  use types.{hero,villain,location,fight-result,fight-request};
  export perform-fight;
  export wasi:http/incoming-handler@0.2.4;
  import wasi:logging/logging@0.1.0-draft;
  import wasi:clocks/wall-clock@0.2.4;
  import hero-repository;
  import villain-repository;
  import location-repository;
}


world superhero {
  include base;
  include hero-api-world;
  include villain-api-world;

}